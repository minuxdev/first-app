1.  CREATING COMPONENTS 

Components are just typescript class's that are instanciated
by Angular. 
It MUST end with '.component.ts' and MUST contain:
    packages imports:
        witch add functions the component will use.
        
        e.g.    import { Component } from '@angular/core';

    Decorator: 
        this is what hold the informations about the component`
        such as 'selector' and 'templateUrl'. It holds metadata
        that tells Angular to know what to do with the class.

        e.g     @Component({
                    selector: 'app-server';
                    templateUrl: './server.component.html' <<--- Must exits 
                                    in the same directory
                })

    
    Class:  
        is the class that is used by angular to lead all parts of this component.
       
        e.g     export class ServerComponent {
                    // some code here //
                }


    After creating, the component needs to be added into 'declarations' array
    so that Angular can recognize it and load.
    file: "src/app/app.module.ts"
    array: 'declarations'
    add:    'component'

    Also is important to make typescript recognize it and that is done by importing it
    e.g     import { ServerComponent } from './server/server.component';

    At this point, the component is ready to be used and to do it just add
    the <selector> into app.component.html. From here, every change made in 
    server.component.html will be rendered the app page.
    e.g     <app-server></app-server>



2.  STYLING COMPONENTS TEMPLATES 

    To style templates can be done using a vanilla css or any framework that works with styling
    such as tailwindcss, sass, bootstrap, etc. however, in this app bootstrap will be used.
    Is allways a good practice to use external file for styling components templates, however, for 
    that file needs to be loaded by Angular, to do so, line bellow needs to be added into 
    '.component.ts' under '@component' decorator.
        styleUrls: ['<path>', '<to>', '<files>']. 
    NOTE: Each file MUST end with  '.component.css'.
        e.g.    styleUrls: ['./server.component.css'] <<== relative path

    From here, styles files can be used into templates.

    To create styles that every template can use, "src/styles.css" is used instead.


3.  DATABINDING AND STRING INTERPOLATION

    Is obvious that during the execution of the app there are excenge of data between 
    the AppTemplate and the AppBack-end, being so, is important to know how to deal with it
    correctly. Here is where typescript come into picture.
    With typescript is possible to do DATABINDING by using STRING INTERPOLATION so data can
    be treated correctly.

    NOTE:   String interpolation shuld be in the end a string, meaning, cannot be added blocks of
            code such as 'for loop' or 'if statements', also, it cannot be a multi-line.

    e.g     If a user want to get some information about something especific (can be productName)
            he could just type its name (or keywork) in search bar. So, to get that keywork is necessary
            to create a variable that can hold it and send to the 'back-end' and after processing it
            return the resoults to the page.

            How it can be done?

            1. create a veriable to hold it in component class
            2. use string interpolation by using '{{ variable }}' format.

            That's it!

            Resuming:
                Binding propriety is '[]'. with this theres no need to use string interpolation.
                    e.g.    [src]="imageSorce" == src={{ imageSorce }}
                
                String interpolation propriety is '{{ string }}'
                    It means that the 'string' will replaced by whatever it means according to it definiftion
                    in the component class. [demonstrated in exemple bellow].

            e.g.    
                    in component.ts
                    export class ServerComponent {
                    // var name: type
                        keyword: string ;

                        classMethod() {
                            return this.keyword;
                        }
                    }

                    in component.html
                    This is called two-way-binding because the keyword var is updated whenever the input changes
                    <input [(ngModel)]="keyword" type="text">

                    And this is a impple bunding the couse the inputHandler() method will take care of the event 
                    as soon as it is sent. The input value can be caught by using
                    this.vaue = (<HTMLInputElement>event.target).value;
                    <input (input)="inputHandler($event)"> 

                    <p>You are seaching for {{ keyword }} to the server</p>
                    <p>This will produce the same resoult because the 
                    this method does nothing but returning the variable: {{ classMethod() }}</p>



4.  EVENT BINDING

    As known, interactive apps are basically called reactive apps due the logic behind them.
    interactive apps are almost allways waiting to respond the user according to his usage.
    It means that the app must be ready to respond to a bunch of events expected to be fired (triggered)
    by the user or browser and this is how the binding are handled.

    To get an event is used the following sintax:
        (event)="methodHandler($event)" 
        be awere that without '$' won't works. 

        TIP: html event list: https://www.w3schools.com/tags/ref_eventattributes.asp
                All html events can be converted to Angular events just by removing the 'on' prefix.
                e.g     html event: onclick     ==      angular event: (click)
                        html event: onload      ==      angular event: (load), etc.
    
    e.g     in component.ts
            name: string;
            eventHandler() {
                return this.name = prompt("What is your name: ");
            }

            in .component.html
            <button (click)="eventHandler($event)">Click Me</button>
            <p>Hi, {{ name }}! </p>


5.  DIRECTIVES
    Directives are instructions in the DOM.
    Are conditions passed to the DOM to do a specific task, for example, display a variable value only
    if it has some value in it, else, ignore it.

    In the DOM it would be something like <p *ngIf="variable">{{ variable }}</p>
    This paragraph will only be displayed if 'variable' has some value in it.

    Here are some built-in directives:
        1.  FOR CONDITIONS
            If condition:       *ngIf="condition"               
                        <p *ngIf="variable"> // do something //</p>

            If else condition:   *ngIf="condition; esle reference"
                        <p *ngIf="variable; esle reference"> // do something //</p>
                        <ng-template #reference>
                            <p> // do something //</p>
                        </ng-template>

        2.  FOR STYLING
            for styling, ngStyle and ngClass directives are used.
            
            ngStyle == is used to change CSS propriety
            
            ngClass == is used to dynamically remove or add classes existing 
                        in one of the files listed in StyleUrls list.
            
            ngStyle
                usage:
                    ngStyle="javascript Style propriety: value"
                    e.g     [ngStyle]="{backgroundColor: 'red'}"

                            // .component.html
                            [ngStyle]="{color: getColor()}"

                            // .component.ts
                            getColor() {
                                // using ternary operator
                                return this.name === '' ? 'red' : 'green';
                            }

                            first: defining a static value for backgroundColor propriety
                            second: calling 'component.ts' method that return a valid value for bgC propriety.

            ngClass
                usage:
                    ngClass="JSON"
                    JSON MUST have the following key and value:
                        {className: condition to whether add or not this class}
                
                e.g. // .component.html   
                    <p [ngClass]="{class: name === 'minux'}"> {{ name }}</p>

                    // .component.css
                    .class {
                        color: whitesmoke;
                        text-align: center;
                        font-size: 2rem;
                    }

        3.  FOR LOOPING
            ngFor   is used to loop through an iterable object (like array)

            usage:
                *ngFor="let tempVar of iterableObject"

                e.g     // .component.html
                    <div *ngFor="let item of items">
                        <p>{{ item }}</p>
                    </div>

                    explenation:
                        It will create paragraph for each item of items inside the 
                        'div' tag.
                
                    // .component.ts
                    items: string[] = ['item1', 'item2', 'item3', 'item4'];

                    to get the index of the element
                        <div *ngFor="let item of items; let i = index">
                            <p>Index: {{ i }}   value: {{ item }}</p>
                        </div>